/*
 * This file was generated by the Gradle 'init' task.
 *
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    /* 
     * Adding the java plugin provides these features:
     * A compileJava task that compiles all the Java source files under src/tweeting/java
     * A compileTestJava task for source files under src/test/java
     * A test task that runs the tests from src/test/java
     * A jar task that packages the compiled classes and into a single JAR named <project>-<version>.jar
     * A javadoc task that generates Javadoc for the main classes
     */
    // Apply the application plugin to add support for building an application
    id 'application'

    // Apply Jacoco for code coverage
    id 'jacoco'

    id 'java'

    id "net.ltgt.apt-idea" version "0.18"
}

repositories {
    mavenCentral()
}

dependencies {
    // Include dependencies for compile and run time
    implementation 'com.google.guava:guava:27.0.1-jre',
            'org.twitter4j:twitter4j-core:4.0.7',
            'io.dropwizard:dropwizard-core:1.0.2',
            'ch.qos.logback:logback-classic:1.3.0-alpha4',
            'ch.qos.logback:logback-access:1.3.0-alpha4',
            'org.slf4j:slf4j-api:1.8.0-beta4'

    compile 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    // JUnit for unit testing
    testImplementation 'junit:junit:4.12'

    // Mocking Framework used with unit testing
    testCompile 'org.mockito:mockito-core:2.27.0'

    // implementation: used for compile and run time
    // testImplementation: (^ equivalent, but for tests)
}


// Display test results for individual unit tests
test {
    testLogging {
        exceptionFormat = 'full'
    }
    // testLogging.showStandardStreams = true //allow print line
}

// Check code coverage requirements
jacocoTestCoverageVerification {
    violationRules {
        rule { // 100% Path Coverage
            element = 'CLASS'
            includes = ['tweeting.resources.*',
                        'tweeting.services.TwitterService',
                        'tweeting.conf.*']
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }

        rule { // 100% Line Coverage (added as well because 'JaCoCo does not consider exception handling as branches')
            element = 'CLASS'
            includes = ['tweeting.resources.*',
                        'tweeting.services.TwitterService',
                        'tweeting.conf.*']
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

// Define the tweeting class for the application
mainClassName = 'tweeting.TweetingApplication'
run {
    args = ['server', 'config.yml']
}

// Java Version
sourceCompatibility = '1.8'
targetCompatibility = '1.8'